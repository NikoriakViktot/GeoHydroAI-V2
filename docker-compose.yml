

services:
  postgis:
    build: ./services/postgis
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./services/postgis/init:/docker-entrypoint-initdb.d
    ports:
      - "55432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 15
    networks: [web]



  terracotta:
    build: ./services/tc_app
    environment:
      COG_DATA_DIR: /app/data/cogs
      TC_DB: /app/tc_db/terracotta.sqlite
      TC_PORT: 5000
      TC_HOST: 0.0.0.0
    volumes:
      - ./data/cogs:/app/data/cogs:ro
      - tcdb:/app/tc_db
      - tc_tmp:/tmp
    expose:
      - "5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 3s
      retries: 15
    networks: [web]

  api:
    build:
         context: .
         dockerfile: services/api/Dockerfile
    environment:
      POSTGRES_URL: postgresql+psycopg://postgres:${POSTGRES_PASSWORD}@postgis:5432/${POSTGRES_DB}
      TERRACOTTA_URL: ${TERRACOTTA_URL}
      DEFAULT_DEMS: ${DEFAULT_DEMS}
      SLOPE_LAYER: ${SLOPE_LAYER}
      HAND_LAYER: ${HAND_LAYER}
    depends_on:
      postgis:
        condition: service_healthy
      terracotta:
        condition: service_healthy
    expose:
      - "${API_PORT}:8000"
    networks: [web]
    volumes:
      - ./data/parquet:/app/data/parquet:ro   # <-- тут твій layers_index.json
      - ./data/cogs:/app/data/cogs:ro         # <-- щоб Dash читав GeoTIFF
      - tc_tmp:/tmp


  dash:
     build:
       context: ./services/dash
       target: dash
     environment:
       API_URL: http://api:8000
       MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN:-}
       TERRACOTTA_PUBLIC_URL: https://geohydroai.org/tc
       LOG_LEVEL: DEBUG
       DATA_DIR: /app/data/parquet
     depends_on:
       api:
         condition: service_started
     ports:
       - "${DASH_PORT:-8050}:8050"
     restart: unless-stopped
     networks: [web]
     volumes:
       - ./data/parquet:/app/data/parquet:ro   # <-- тут твій layers_index.json
       - ./data/cogs:/app/data/cogs:ro         # <-- щоб Dash читав GeoTIFF
       - tc_tmp:/tmp

  nginx:
    image: nginx:stable
    container_name: geoai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot:ro
      - certs:/etc/letsencrypt:ro
      - /var/www/geoai-front:/var/www/geoai-front:ro
    restart: unless-stopped
    networks: [web]


  # одноразовий запуск для випуску серта (ручний запуск командою нижче)
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www:/var/www/certbot
      - certs:/etc/letsencrypt
    entrypoint: /bin/sh
    networks: [web]

  certbot-renewer:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www:/var/www/certbot
      - certs:/etc/letsencrypt
    entrypoint: /bin/sh -c 'while :; do certbot renew --webroot -w /var/www/certbot --quiet --deploy-hook "nginx -s reload"; sleep 12h; done'
    networks: [ web ]

    # Команди запускатимеш вручну через `docker compose run --rm certbot ...`

volumes:
  pgdata:
  certs:
  tcdb:
  tc_tmp:

networks:
  web: {}
